{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["groupTransform","App","useState","width","setWidth","height","setHeight","DOMMatrix","transformationMatrix","setTransformationMatrix","x","y","viewboxStart","setViewboxStart","dragStart","setDragStart","initialViewboxStart","setInitialViewboxStart","readyToRender","setReadyToRender","svgRef","useRef","transformableGroupRef","useEffect","window","innerWidth","innerHeight","current","createSVGMatrix","addEventListener","onWheel","passive","document","event","preventDefault","scale","deltaY","coords","svgElement","groupElement","point","createSVGPoint","matrixTransform","getScreenCTM","inverse","convertScreenCoordsToSvgCoords","clientX","clientY","translate","transform","createSVGTransform","setMatrix","matrix","className","onContextMenu","onMouseDown","onTouchStart","touches","firstTouch","nativeEvent","onTouchMove","onMouseMove","onMouseUp","ref","viewBox","style","background","a","b","c","d","e","f","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b55657c.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\n\nconst SCALE_FACTOR = 0.03;\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nfunction convertScreenCoordsToSvgCoords(\n  x: number,\n  y: number,\n  svgElement: SVGSVGElement,\n  groupElement: SVGGraphicsElement\n) {\n  var point = svgElement.createSVGPoint();  // An SVGPoint SVG DOM object\n  point.x = x;\n  point.y = y;\n  point = point.matrixTransform(groupElement.getScreenCTM()?.inverse());\n  return {\n    x: point.x,\n    y: point.y,\n  };\n}\n\nlet groupTransform: DOMMatrix;\n\nfunction App() {\n  const [width, setWidth] = useState(600);\n  const [height, setHeight] = useState(600);\n  const [transformationMatrix, setTransformationMatrix] = useState<DOMMatrix>(new DOMMatrix());\n  const [viewboxStart, setViewboxStart] = useState<Point>({ x: 0, y: 0 });\n  const [dragStart, setDragStart] = useState<Point>({ x: -1, y: -1 });\n  const [initialViewboxStart, setInitialViewboxStart] = useState<Point>({\n    x: -1,\n    y: -1,\n  });\n  const [readyToRender, setReadyToRender] = useState(false);\n  \n  const svgRef = useRef<SVGSVGElement>(null);\n  const transformableGroupRef = useRef<SVGGraphicsElement>(null);\n  useEffect(() => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n    setReadyToRender(true);\n  }, []);\n\n  useEffect(() => {\n    if (svgRef.current) {\n      groupTransform = svgRef.current.createSVGMatrix();\n      svgRef.current.addEventListener('wheel', onWheel, {\n        passive: false,\n      });\n    }\n    document.addEventListener('gesturestart', (event) => {\n      event.preventDefault();\n      \n    });\n    document.addEventListener('gesturechange', (event) => {\n      event.preventDefault();\n      \n    });\n    document.addEventListener('gestureend', (event) => {\n      event.preventDefault();\n      \n    });\n    document.addEventListener('DOMMouseScroll', (event) => {\n      event.preventDefault();\n    });\n  }, [readyToRender]);\n\n  const onWheel = (event: any) => {\n    if (!svgRef.current || !transformableGroupRef.current) {\n      return;\n    }\n    event.preventDefault();\n    const scale = event.deltaY * SCALE_FACTOR * -1;\n    var coords = convertScreenCoordsToSvgCoords(\n      event.clientX,\n      event.clientY,\n      svgRef.current,\n      transformableGroupRef.current);\n\n    groupTransform = groupTransform.translate(coords.x, coords.y);\n    groupTransform = groupTransform.scale(1 + scale);\n    groupTransform = groupTransform.translate(-coords.x, -coords.y);\n\n    const transform = svgRef.current.createSVGTransform();\n    transform.setMatrix(groupTransform);\n    setTransformationMatrix(transform.matrix);\n  };\n  return (\n    <div className=\"container\">\n      {readyToRender && (\n        <svg\n        onContextMenu={(event) => event.preventDefault()}\n        onMouseDown={(event) => {\n          setDragStart({ x: event.clientX, y: event.clientY });\n          setInitialViewboxStart(viewboxStart);\n        }}\n        onTouchStart={({ touches, nativeEvent }) => {\n          const firstTouch = touches[0];\n          setDragStart({ x: firstTouch.clientX, y: firstTouch.clientY });\n          setInitialViewboxStart(viewboxStart);\n        }}\n        onTouchMove={({ touches }) => {\n          if (dragStart.x > -1 && dragStart.y > -1) {\n            const firstTouch = touches[0];\n            \n            setViewboxStart({\n              x: initialViewboxStart.x + (firstTouch.clientX - dragStart.x) * -1,\n              y: initialViewboxStart.y + (firstTouch.clientY - dragStart.y) * -1,\n            });\n          }\n        }}\n        onMouseMove={(event) => {\n          if (dragStart.x > -1 && dragStart.y > -1) {\n            setViewboxStart({\n              x: initialViewboxStart.x + (dragStart.x - event.clientX),\n              y: initialViewboxStart.y + (dragStart.y - event.clientY),\n            });\n          }\n        }}\n        onMouseUp={() => {\n          if (dragStart.x > -1 && dragStart.y > -1) {\n            setDragStart({\n              x: -1,\n              y: -1,\n            });\n          }\n        }}\n        width={width}\n        ref={svgRef}\n        height={height}\n        viewBox={`${viewboxStart.x} ${viewboxStart.y} ${width} ${height}`}\n        style={{\n          background: \"snow\",\n        }}\n      >\n        <g\n          transform={\n            `matrix(\n              ${transformationMatrix.a},\n              ${transformationMatrix.b},\n              ${transformationMatrix.c},\n              ${transformationMatrix.d},\n              ${transformationMatrix.e},\n              ${transformationMatrix.f}\n            )`\n          }\n          ref={transformableGroupRef}\n        >\n          <rect width={width-700} fill=\"rgb(40, 40, 40)\" height={height-200} x={100} y={100} />\n          <rect width={300} fill=\"rgb(40, 40, 40)\" height={300} x={width-500} y={100} />\n        </g>\n      </svg>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}